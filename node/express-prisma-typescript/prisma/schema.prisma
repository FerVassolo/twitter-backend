// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username String  @unique // Unique constraint
  name     String? @db.VarChar(35) // Limit display name to 35 characters
  email    String  @unique // Unique constraint
  password String
  isPublic Boolean @default(true) // Default value

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts            Post[]
  follows          Follow[]   @relation(name: "follows")
  followers        Follow[]   @relation(name: "followers")
  Reaction         Reaction[]
  sentMessages     Message[]  @relation("SentMessages") // Mensajes enviados
  receivedMessages Message[]  @relation("ReceivedMessages") // Mensajes recibidos
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String   @db.Uuid // Foreign Key
  content  String   @db.VarChar(240) // Limit the content to 240 characters
  images   String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  status PostStatus @default(PENDING)

  respondsToId String? @db.Uuid // Optional foreign key
  respondsTo   Post?   @relation("PostRespondsTo", fields: [respondsToId], references: [id]) // Self-relation
  responses    Post[]  @relation("PostRespondsTo") // Inverse relation for responses

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  reactionerId String       @db.Uuid
  postId       String       @db.Uuid
  type         ReactionType

  createdAt DateTime @default(now())

  // If the user is deleted, their relations should be deleted as well
  reactioner User @relation(fields: [reactionerId], references: [id], onDelete: Cascade) // One to many

  // Shouldn't be able to react to the same post twice
  @@unique([reactionerId, postId, type])
}

model Message {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  senderId   String @db.Uuid
  receiverId String @db.Uuid
  content    String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  // Eventual upgrades
  // respondsTo String? @db.Uuid // Optional foreign key
  // image     String
  // audio     String? // We save the audio name, then we store the audio in an external storage.
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum ReactionType {
  LIKE
  RETWEET
}

enum PostStatus {
  PENDING
  APPROVED
}
